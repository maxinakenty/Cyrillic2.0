// Su Validation Tests
// ===================


// Valid Span
// ----------
@include test-module('Su Valid Span [function]') {
  @include test('Arbitrary span') {
    @include assert-equal(
      su-valid-span(4),
      4,
      'A unitless span is valid');
  }

  @include test('Explicit span') {
    @include assert-equal(
      su-valid-span(200mm),
      200mm,
      'A united length is valid');
  }

  @include test('Explicit list of columns') {
    $list: 8em 6em 4em;

    @include assert-equal(
      su-valid-span($list),
      $list,
      'A list of comparable columns is valid');
  }

  @include test('Mismatched list error') {
    @include assert-equal(
      su-valid-span(1px 2 4em 3),
      'ERROR [su-valid-span] [list] `1px 2 4em 3` is not a valid number, length, or column-list for $span.');
  }

  @include test('Unknown type error') {
    @include assert-equal(
      su-valid-span(blue),
      'ERROR [su-valid-span] [color] `blue` is not a valid number, length, or column-list for $span.');
  }
}


// Valid Columns
// -------------
@include test-module('Su Valid Columns [function]') {
  @include test('Fluid columns') {
    @include assert-equal(
      su-valid-columns(1 2 4 2),
      1 2 4 2,
      'A list of unitless numbers is list of fluid columns');
  }

  @include test('Single fluid column') {
    $list: 4;

    @include assert-equal(
      su-valid-columns(4),
      $list,
      'A single unitless number is a single fluid column');
  }

  @include test('Static columns') {
    @include assert-equal(
      su-valid-columns(10cm 200mm 45cm 230mm),
      10cm 200mm 45cm 230mm,
      'A list of comparably-united numbers are a list of static columns');
  }

  @include test('Single static column') {
    $list: 20em;

    @include assert-equal(
      su-valid-columns(20em),
      $list,
      'A single united number is a single static column');
  }

  @include test('Mismatched units error') {
    @include assert-equal(
      su-valid-columns(1px 2 4em 3),
      'ERROR [su-valid-columns] [list] `1px 2 4em 3` is not a valid list of comparable lengths for $columns.');
  }

  @include test('Silent failure') {
    @include assert-equal(
      su-valid-columns(1px 2 4em 3, 'silent-failure'),
      null);
  }

  @include test('Mismatched unitless error') {
    @include assert-equal(
      su-valid-columns(1 2 4em 3),
      'ERROR [su-valid-columns] [list] `1 2 4em 3` is not a valid list of comparable lengths for $columns.');

    @include assert-equal(
      su-valid-columns(1em 2 4em 3),
      'ERROR [su-valid-columns] [list] `1em 2 4em 3` is not a valid list of comparable lengths for $columns.');
  }
}


// Valid Gutters
// -------------
@include test-module('Su Valid Gutters [function]') {
  @include test('Fluid') {
    @include assert-equal(
      su-valid-gutters(0.75, 1 1 1),
      0.75,
      'A unitless number is a valid setting for gutters');
  }

  @include test('Static') {
    @include assert-equal(
      su-valid-gutters(3cm, 10cm 10cm),
      3cm,
      'Any length is a valid setting for gutters on a static grid');
  }

  @include test('Static gutters, fluid grid') {
    @include assert-equal(
      su-valid-gutters(3cm, 1 1 1 1),
      3cm,
      'Static gutters are allowed on a fluid grid');
  }

  @include test('Invalid gutters error') {
    @include assert-equal(
      su-valid-gutters('wtf', 1cm 1cm 1cm 1cm),
      'ERROR [su-valid-gutters] [string] `#{inspect("wtf")}` is not a value for $gutters.')
  }

  @include test('Mismatched gutter/column unitless error') {
    @include assert-equal(
      su-valid-gutters(1, 1px 1px 1px 1px),
      'ERROR [su-valid-gutters] Gutters must have units for a static grid.')
  }

  @include test('Mismatched gutter/column units error') {
    @include assert-equal(
      su-valid-gutters(1em, 1px 1px 1px 1px),
      'ERROR [su-valid-gutters] Gutter and column units must be comparable.')
  }
}


// Valid Spread
// ------------
@include test-module('Su Valid Spread [function]') {
  @include test('Numeric spread') {
    @include assert-equal(
      su-valid-spread(-1),
      -1,
      'Valid number is returned directly');
  }

  @include test('Unknown spread error') {
    @include assert-equal(
      su-valid-spread(4),
      'ERROR [su-valid-spread] [number] `4` is not a normalized [0 | 1 | -1] value for `$spread`.');
  }
}


// Valid Location
// --------------
@include test-module('Su Valid Location [function]') {
  @include test('Numeric column position') {
    @include assert-equal(
      su-valid-location(2, 3, 1 2 3 5 8),
      3,
      'Valid position returns unchanged');
  }

  @include test('Location units error') {
    @include assert-equal(
      su-valid-location(2, 3em, 1 2 3 5 8),
      'ERROR [su-valid-location] [number] `3em` is not a unitless number for $location.');
  }

  @include test('Location floating-point error') {
    @include assert-equal(
      su-valid-location(2, 3.5, 1 2 3 5 8),
      'ERROR [su-valid-location] Location (`3.5`) must be a 1-indexed intiger position.');
  }

  @include test('Location off-grid error') {
    @include assert-equal(
      su-valid-location(2, 8, 1 2 3 5 8),
      'ERROR [su-valid-location] Position `8` does not exist in grid `1 2 3 5 8`.');

    @include assert-equal(
      su-valid-location(2, -2, 1 2 3 5 8),
      'ERROR [su-valid-location] Position `-2` does not exist in grid `1 2 3 5 8`.');
  }

  @include test('Location/span combination error') {
    @include assert-equal(
      su-valid-location(6, 3, 1 2 3 5 8),
      'ERROR [su-valid-location] There are not enough columns in grid `1 2 3 5 8` for span `6` at `3`.');
  }
}
